## 全局配置, 用于设定义全局参数, 属于进程级的配置, 通常与操作系统配置有关.
global  
	# 定义全局日志, 配置在本地, 通过local0 输出, 默认是info级别，可配置两条
	# log [address] [device] [maxlevel] [minlevel]
	log 127.0.0.1 local0 debug err
	# 定义日志级别【emerg alert crit err warning notice info debug】
	## log 127.0.0.1 local1 info
	# 运行路径
	chroot /usr/local/haproxy
	# PID 文件存放路径
	pidfile /usr/local/haproxy/run/haproxy.pid 
	# 设置每haproxy进程的最大并发连接数, 其等同于命令行选项“-n”; “ulimit -n”自动计算的结果参照此参数设定.
	maxconn 51200
	# 运行haproxy 用户, 或者使用关键字uid
	## user haproxy
	uid 99
	# 运行haproxy 用户组, 或者使用关键字gid
	## group haproxy
	gid 99
	# 后台运行haproxy
	daemon
	# 设置启动的haproxy进程数量, 只能用于守护进程模式的haproxy;
	# 默认只启动一个进程, 鉴于调试困难等多方面的原因, 一般只在单进程仅能打开少数文件描述符的场景中才使用多进程模式.
	nbproc 1
	# 设置每进程所能够打开的最大文件描述符数目, 默认情况其会自动进行计算, 因此不推荐修改此选项.
	## ulimit -n 819200
	# 调试级别, 一般只在开启单进程时调试, 且生产环境禁用.
	debug
	# haproxy启动后不会显示任何相关信息, 这与在命令行启动haproxy时加上参数“-q”相同
	## quiet
	# 定义统计信息保存位置
	stats socket /usr/local/haproxy/stats

## 默认配置
defaults  
	# 默认的模式【 tcp:4层; http:7层; health:只返回OK 】
	mode http
	# 继承全局的日志定义输出
	log global
	# 日志类别, httplog
	## option httplog
	# 如果后端服务器需要记录客户端真实ip, 需要在HTTP请求中添加”X-Forwarded-For”字段;
	# 但haproxy自身的健康检测机制访问后端服务器时, 不应将记录访问日志，可用except来排除127.0.0.0，即haproxy本身.
	## option forwardfor except 127.0.0.0/24
	## option forwardfor
	# 开启http协议中服务器端关闭功能, 每个请求完毕后主动关闭http通道, 使得支持长连接，使得会话可以被重用，使得每一个日志记录都会被记录.
	option httpclose
	## 当完成响应时，立即关闭对外的服务通道
	option forceclose
	# 如果产生了一个空连接，那这个空连接的日志将不会记录.
	option dontlognull
	# 当与后端服务器的会话失败(服务器故障或其他原因)时, 把会话重新分发到其他健康的服务器上; 当故障服务器恢复时, 会话又被定向到已恢复的服务器上;
	# 还可以用”retries”关键字来设定在判定会话失败时的尝试连接的次数
	option redispatch
	retries 2
	# 当haproxy负载很高时, 自动结束掉当前队列处理比较久的链接.
	option abortonclose
	# 默认http请求超时时间
	timeout http-request 10s
	# 默认队列超时时间, 后端服务器在高负载时, 会将haproxy发来的请求放进一个队列中.
	timeout queue 30s
	# haproxy与后端服务器连接超时时间.
	timeout connect 2s
	# 客户端与haproxy连接后, 数据传输完毕, 不再有数据传输, 即非活动连接的超时时间.
	timeout client 30s
	# haproxy与后端服务器非活动连接的超时时间.
	timeout server 30s
	# 默认新的http请求连接建立的超时时间，时间较短时可以尽快释放出资源，节约资源.
	timeout http-keep-alive 10s
	# 心跳检测超时时间
	timeout check 10s
	# 最大并发连接数
	maxconn 2000
	# 设置默认的负载均衡方式
	# 另有如下几种负载均衡方式：
    # -- static-rr: 也是基于权重进行轮转调度, 但属于静态方法, 运行时调整后端机组权重不会使用新的权重;
    # -- source: 基于请求源IP进行hash运算匹配后端服务器组;
    # -- leastconn: 不适合会话较短的环境, 如基于http的应用;
    # -- uri: 对整个URI进行hash运算;
    # -- uri_param: 对URI中的参数进行转发;
    # -- hdr(<name>): 根据http头进行转发, 无该头部则转为使用roundrobin;
	# -- roundrobin: 轮询方式;
	balance roundrobin

## 统计页面配置, frontend和backend的组合体, 监控组的名称可按需自定义  
listen admin_stats  
	# 配置监控运行模式
	mode http
	# 配置统计页面访问端口
	bind 0.0.0.0:8888
	# 统计页面默认最大连接数
	maxconn 10
	# http日志格式
	option httplog
	# 开启统计
	stats enable
	# 隐藏统计页面上的haproxy版本信息
	stats hide-version
	# 监控页面自动刷新时间
	stats refresh 30s
	# 统计页面访问url
	stats uri /
	# 统计页面密码框提示文本
	stats realm mCloud\ Haproxy
	## stats realm Haproxy Manager
	# 监控页面的用户和密码:admin, 可设置多个用户名
	stats auth admin:LxxPacy89
	# 手工启动/禁用后端服务器, 可通过web管理节点
	stats admin if TRUE
	# 设置haproxy错误页面
	## errorfile 400 /usr/local/haproxy/errorfiles/400.http
    ## errorfile 403 /usr/local/haproxy/errorfiles/403.http
    ## errorfile 408 /usr/local/haproxy/errorfiles/408.http
    ## errorfile 500 /usr/local/haproxy/errorfiles/500.http
    ## errorfile 502 /usr/local/haproxy/errorfiles/502.http
    ## errorfile 503 /usr/local/haproxy/errorfiles/503.http
    ## errorfile 504 /usr/local/haproxy/errorfiles/504.http

## 监控haproxy后端Slavve服务器的监控状态
listen mysql-slave 
	# 配置监控运行模式
	mode tcp
	# 配置访问端口
	bind 0.0.0.0:3200
	# 定义日志级别【emerg alert crit err warning notice info debug】
	log 127.0.0.1 local0 info err
	# inter 2000 健康检查时间间隔2秒
    # rise 3 检测多少次才认为是正常的
    # fall 3 失败多少次才认为是不可用的
    # weight 30 权重
	# maxconn 2000 最大链接数
	## option tcplog
	# 客户端与haproxy连接后, 数据传输完毕, 不再有数据传输, 即非活动连接的超时时间.
	# 客户端空闲回收
	# mysql 默认wait_timeout = 28800 interactive_timeout = 28800 最好做出对应的调整
	timeout client  28790s
	# haproxy与后端服务器非活动连接的超时时间.
	# 服务端空闲回收
	# mysql 默认wait_timeout = 28800 interactive_timeout = 28800 最好做出对应的调整
    timeout server  28790s
	## 长会话的连接
    balance leastconn

	server mysql-slave-1 172.32.6.101:3306 check inter 2000 rise 3 fall 3 weight 30 maxconn 2000
	server mysql-slave-2 172.32.6.102:3306 check inter 2000 rise 3 fall 3 weight 30 maxconn 2000
	server mysql-slave-3 172.32.6.103:3306 check inter 2000 rise 3 fall 3 weight 30 maxconn 2000
	server mysql-slave-4 172.32.6.104:3306 check inter 2000 rise 3 fall 3 weight 30 maxconn 2000
	server mysql-slave-5 172.32.6.105:3306 check inter 2000 rise 3 fall 3 weight 30 maxconn 2000

## 监控haproxy后端备份服务器的监控状态
listen mysql-backup
	# 配置监控运行模式
	mode tcp
	# 配置访问端口
	bind 0.0.0.0:3101
	# 定义日志级别【emerg alert crit err warning notice info debug】
	log 127.0.0.1 local0 info err
	# maxconn 2000 最大链接数
	timeout client  28790s
    timeout server  28790s
    ## 长会话的连接
    balance leastconn

	server mysql-backup-1 172.32.6.11:3306 check weight 1 maxconn 2000

## 监控haproxy后端Master服务器的监控状态
listen mysql-master
	# 配置监控运行模式
	mode tcp
	# 配置访问端口
	bind 0.0.0.0:3100
	# 定义日志级别【emerg alert crit err warning notice info debug】
	log 127.0.0.1 local0 info err
	# maxconn 2000 最大链接数
	timeout client  28790s
    timeout server  28790s
    ## 长会话的连接
    balance leastconn

	server mysql-master-1 172.32.6.10:3306 check weight 1 maxconn 2000
